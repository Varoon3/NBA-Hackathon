} else if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 8] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 7]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 6]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 9]
} else if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 12] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 11]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 10]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 13]
} else if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 16] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 15]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 14]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 17]
}
}
}
train_edit_df_day_cast <- data.frame(train_edit_df$GAME_ID, as.character(train_edit_df$SEASON), train_edit_df$GAME_DATE, as.character(train_edit_df$AWAY_TEAM), as.character(train_edit_df$HOME_TEAM), train_edit_df$AWAY_TREND, train_edit_df$HOME_TREND, train_edit_df$VIEWERS, train_edit_df_day$DAY, -1, -1)
names(train_edit_df_day_cast) <- c('GAME_ID', 'SEASON', 'GAME_DATE', 'AWAY_TEAM', 'HOME_TEAM', 'AWAY_TREND', 'HOME_TREND', 'VIEWERS', 'DAY', 'TIME', 'BROADCAST')
for (train in 1:nrow(train_edit_df_day_cast)) {
for (time in 1: nrow(X2016_2017_NBA_National)) {
if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 4] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 3]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 2]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 5]
} else if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 8] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 7]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 6]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 9]
} else if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 12] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 11]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 10]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 13]
} else if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 16] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 15]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 14]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 17]
}
}
}
remove(X2016_2017_NBA_National)
library(readr)
X2016_2017_NBA_National <- read_delim("~/NBA-Hackathon/Business Analytics/Business Analytics/TV Schedule/2016_2017_NBA_National.csv",
" ", escape_double = FALSE, col_types = cols(DATE = col_date(format = "%Y-%m-%d")),
trim_ws = TRUE)
View(X2016_2017_NBA_National)
for (train in 1:nrow(train_edit_df_day_cast)) {
for (time in 1: nrow(X2016_2017_NBA_National)) {
if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 4] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 3]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 2]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 5]
} else if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 8] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 7]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 6]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 9]
} else if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 12] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 11]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 10]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 13]
} else if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 16] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 15]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 14]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 17]
}
}
}
for (train in 1:nrow(train_edit_df_day_cast)) {
for (time in 1: nrow(X2016_2017_NBA_National)) {
if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 4] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 3]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 2]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 5]
} else if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 4] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 3]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 2]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 5]
} else if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 4] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 3]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 2]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 5]
} else if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 4] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 3]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 2]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 5]
}
}
}
class(X2016_2017_NBA_National[1,4])
X2016_2017_NBA_National <- cbind(X2016_2017_NBA_National$DATE, X2016_2017_NBA_National$TIME, X2016_2017_NBA_National$AWAY, X2016_2017_NBA_National$HOME, X2016_2017_NBA_National$BROADCAST)
for (train in 1:nrow(train_edit_df_day_cast)) {
for (time in 1: nrow(X2016_2017_NBA_National)) {
if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 4] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 3]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 2]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 5]
} else if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 4] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 3]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 2]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 5]
} else if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 4] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 3]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 2]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 5]
} else if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 4] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 3]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 2]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 5]
}
}
}
library(readr)
X2016_2017_NBA_National <- read_delim("~/NBA-Hackathon/Business Analytics/Business Analytics/TV Schedule/2016_2017_NBA_National.csv",
" ", escape_double = FALSE, col_types = cols(DATE = col_date(format = "%Y-%m-%d")),
trim_ws = TRUE)
View(X2016_2017_NBA_National)
X2016_2017_NBA_National <- as.data.frame(X2016_2017_NBA_National$DATE, X2016_2017_NBA_National$TIME, as.factor(X2016_2017_NBA_National$AWAY), as.factor(X2016_2017_NBA_National$HOME), X2016_2017_NBA_National$BROADCAST)
library(readr)
X2016_2017_NBA_National <- read_delim("~/NBA-Hackathon/Business Analytics/Business Analytics/TV Schedule/2016_2017_NBA_National.csv",
" ", escape_double = FALSE, col_types = cols(AWAY = col_factor(levels = c("ATL",
"BOS", "BKN", "CHA", "CHI", "CLE",
"DAL", "DEN", "DET", "GSW", "HOU",
"IND", "LAC", "LAL", "MEM", "MIA",
"MIL", "MIN", "NOP", "NYK", "OKC",
"ORL", "PHI", "WAS", "UTA", "TOR",
"SAS", "SAC", "POR", "PHX")), DATE = col_date(format = "%Y-%m-%d"),
HOME = col_factor(levels = c("ATL",
"BOS", "BKN", "CHA", "CHI", "CLE",
"DAL", "DEN", "DET", "GSW", "HOU",
"IND", "LAC", "LAL", "MEM", "MIA",
"MIL", "MIN", "NOP", "NYK", "OKC",
"ORL", "PHI", "WAS", "UTA", "TOR",
"SAS", "SAC", "POR", "PHX"))),
trim_ws = TRUE)
View(X2016_2017_NBA_National)
for (train in 1:nrow(train_edit_df_day_cast)) {
for (time in 1: nrow(X2016_2017_NBA_National)) {
if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 4] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 3]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 2]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 5]
} else if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 4] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 3]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 2]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 5]
} else if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 4] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 3]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 2]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 5]
} else if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 4] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 3]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 2]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 5]
}
}
}
class(train_edit_df_day_cast[1, 5])
class(X2016_2017_NBA_National[1,4])
X2016_2017_NBA_National[1,4]
for (train in 1:nrow(train_edit_df_day_cast)) {
for (time in 1: nrow(X2016_2017_NBA_National)) {
factor <- X2016_2017_NBA_National[time, 4]
if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == factor & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 3]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 2]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 5]
} else if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 4] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 3]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 2]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 5]
} else if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 4] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 3]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 2]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 5]
} else if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 4] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 3]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 2]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 5]
}
}
}
# Broadcast Addition
train_edit_df_day_cast <- data.frame(train_edit_df$GAME_ID, as.character(train_edit_df$SEASON), train_edit_df$GAME_DATE, as.character(train_edit_df$AWAY_TEAM), as.character(train_edit_df$HOME_TEAM), train_edit_df$AWAY_TREND, train_edit_df$HOME_TREND, train_edit_df$VIEWERS, train_edit_df_day$DAY, -1, -1)
names(train_edit_df_day_cast) <- c('GAME_ID', 'SEASON', 'GAME_DATE', 'AWAY_TEAM', 'HOME_TEAM', 'AWAY_TREND', 'HOME_TREND', 'VIEWERS', 'DAY', 'TIME', 'BROADCAST')
for (train in 1:nrow(train_edit_df_day_cast)) {
for (time in 1: nrow(X2016_2017_NBA_National)) {
factor <- as.character(X2016_2017_NBA_National[time, 4])
if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == factor & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 3]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 2]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 5]
} else if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 4] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 3]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 2]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 5]
} else if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 4] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 3]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 2]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 5]
} else if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == X2016_2017_NBA_National[time, 4] & train_edit_df_day_cast[train,4] == X2016_2017_NBA_National[time, 3]) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 2]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 5]
}
}
}
for (train in 1:nrow(train_edit_df_day_cast)) {
for (time in 1: nrow(X2016_2017_NBA_National)) {
home_factor <- as.character(X2016_2017_NBA_National[time, 4])
away_factor <- as.character(X2016_2017_NBA_National[time, 3])
if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == home_factor & train_edit_df_day_cast[train,4] == away_factor) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 2]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 5]
}
}
}
View(train_edit_df_day_cast)
train_edit_df_day_cast[1,10]
X2016_2017_NBA_National[1, 2]
class(X2016_2017_NBA_National[1, 2])
as.character(X2016_2017_NBA_National[1, 2])
as.double(X2016_2017_NBA_National[1, 2])
as.time(X2016_2017_NBA_National[1, 2])
X2016_2017_NBA_National[1, 2]
as.POSIXct(X2016_2017_NBA_National[1, 2])
class(X2016_2017_NBA_National$TIME)
install.packa\
install.packages('hms')
install.packages("hms")
library(hms)
as.hms(X2016_2017_NBA_National[1,2])
library(readr)
X2016_2017_NBA_National <- read_delim("~/NBA-Hackathon/Business Analytics/Business Analytics/TV Schedule/2016_2017_NBA_National.csv",
" ", escape_double = FALSE, col_types = cols(DATE = col_date(format = "%Y-%m-%d"),
TIME = col_character()), trim_ws = TRUE)
View(X2016_2017_NBA_National)
for (train in 1:nrow(train_edit_df_day_cast)) {
for (time in 1: nrow(X2016_2017_NBA_National)) {
home_factor <- as.character(X2016_2017_NBA_National[time, 4])
away_factor <- as.character(X2016_2017_NBA_National[time, 3])
if (train_edit_df_day_cast[train,3] == X2016_2017_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == home_factor & train_edit_df_day_cast[train,4] == away_factor) {
train_edit_df_day_cast[train,10] <- X2016_2017_NBA_National[time, 2]
train_edit_df_day_cast[train,11] <- X2016_2017_NBA_National[time, 5]
break
}
}
}
library(readr)
X2017_2018_NBA_National <- read_delim("~/NBA-Hackathon/Business Analytics/Business Analytics/TV Schedule/2017_2018_NBA_National.csv",
" ", escape_double = FALSE, col_types = cols(DATE = col_date(format = "%Y-%m-%d"),
TIME = col_character()), trim_ws = TRUE)
View(X2017_2018_NBA_National)
for (train in 1:nrow(train_edit_df_day_cast)) {
for (time in 1: nrow(X2017_2018_NBA_National)) {
home_factor <- as.character(X2017_2018_NBA_National[time, 4])
away_factor <- as.character(X2017_2018_NBA_National[time, 3])
if (train_edit_df_day_cast[train,3] == X2017_2018_NBA_National[time, 1] & train_edit_df_day_cast[train,5] == home_factor & train_edit_df_day_cast[train,4] == away_factor) {
train_edit_df_day_cast[train,10] <- X2017_2018_NBA_National[time, 2]
train_edit_df_day_cast[train,11] <- X2017_2018_NBA_National[time, 5]
break
}
}
}
plot(train_edit_df_day_cast$TIME, train_edit_df_day_cast$VIEWERS)
plot(as.factor(train_edit_df_day_cast$TIME), train_edit_df_day_cast$VIEWERS)
plot(as.factor(train_edit_df_day_cast$BROADCAST), train_edit_df_day_cast$VIEWERS)
train_edit_df_day_cast[507,]
train_edit_df_day_cast[507,10] <- 5:00PM
train_edit_df_day_cast[507,10] <- '5:00PM'
train_edit_df_day_cast[507,]
train_edit_df_day_cast[507,11] <- 'TNT'
class(train_edit_df_day_cast$TIME)
class(train_edit_df_day_cast$BROADCAST)
plot(as.factor(train_edit_df_day_cast$TIME), train_edit_df_day_cast$VIEWERS)
library(readr)
Time_and_Attendance <- read_csv("~/NBA-Hackathon/Business Analytics/Business Analytics/BBREF/Time_and_Attendance.csv",
col_types = cols(Date = col_date(format = "%m %d %Y"),
Notes = col_skip(), `Start (ET)` = col_character(),
X8 = col_character()), na = "empty")
View(Time_and_Attendance)
train_edit_df_day_cast[train,10]
class(train_edit_df_day_cast[train,10])
train_edit_df_day_cast_temp <- train_edit_df_day_cast$OVERTIME
View(train_edit_df_day_cast)
View(train_edit_df_day_cast_temp)
remove(train\)
remove(train_edit_df_day_cast_temp)
temp <- train_edit_df_day_cast
temp$ATTENDANCE = -1
View(temp)
temp$OVERTIME = 'NO'
temp[temp$BROADCAST == '-1', 11] = 'LOCAL'
temp[temp$BROADCAST == 'ABC',]
temp[temp$BROADCAST == 'ABC', 11]
temp[temp$BROADCAST == '-1', 11]
temp[temp$BROADCAST == '-1', 11] <- 'LOCAL'
class(temp$BROADCAST)
temp[temp$BROADCAST == '-1', 11] <- as.character('LOCAL')
temp[temp$BROADCAST == '-1', 11] <- -2
local <- data.fram('LOCAL')
local <- data.frame('LOCAL')
View(local)
local[1,1]
local <- as.character(local$X.LOCAL.)
temp[temp$BROADCAST == '-1', 11] <- local[1,1]
temp[temp$BROADCAST == '-1', 11] <- local[1,]
temp[temp$BROADCAST == '-1', 11] <- local
local <- data.frame('LOCAL')
temp[temp$BROADCAST == '-1', 11] <- local[1,1]
temp$BROADCAST <- ifelse(!is.na(temp$BROADCAST) & temp$BROADCAST == '-1', 'LOCAL', temp$BROADCAST)
for (train in 1:nrow(temp)) {
for (time in 1:nrow(Time_and_Attendance)) {
home_factor <- as.character(Time_and_Attendance[time, 5])
away_factor <- as.character(Time_and_Attendance[time, 3])
if (temp[train,3] == Time_and_Attendance[time,1] & temp[train,5] == home_factor & temp[train,4] == away_factor) {
if (temp[train,10] == "-1") {
temp[train,10] <- Time_and_Attendance[time, 2]
temp[train,12] <- Time_and_Attendance[time, 9]
if (Time_and_Attendance[time, 8] == 'OT') {
temp[train,13] <- Time_and_Attendance[time, 8]
}
break
}
}
}
}
getwd()
write.csv(temp, 'temp.csv', sep=',')
for (train in 1:nrow(temp[temp$ATTENDANCE == '-1'])) {print ('Yolo')}
for (train in 1:nrow(temp[temp$ATTENDANCE == '-1',])) {print ('Yolo')}
for (train in 1:nrow(temp[temp$ATTENDANCE == '-1',])) {print (train)}
for (train in 1:nrow(temp[temp$ATTENDANCE == '-1',])) {
for (time in 1:nrow(Time_and_Attendance)) {
home_factor <- as.character(Time_and_Attendance[time, 5])
away_factor <- as.character(Time_and_Attendance[time, 3])
if (temp[train,3] == Time_and_Attendance[time,1] & temp[train,5] == home_factor & temp[train,4] == away_factor) {
temp[train,12] <- Time_and_Attendance[time, 9]
if (Time_and_Attendance[time, 8] == 'OT') {
temp[train,13] <- Time_and_Attendance[time, 8]
}
break
}
}
}
for (train in 1:nrow(temp[temp$ATTENDANCE == '-1',])) {print (temp[train, ])}
for (train in 1:nrow(temp)) {
for (time in 1:nrow(Time_and_Attendance)) {
home_factor <- as.character(Time_and_Attendance[time, 5])
away_factor <- as.character(Time_and_Attendance[time, 3])
if (temp[train,3] == Time_and_Attendance[time,1] & temp[train,5] == home_factor & temp[train,4] == away_factor) {
temp[train,10] <- Time_and_Attendance[time, 2]
temp[train,12] <- Time_and_Attendance[time, 9]
if (Time_and_Attendance[time, 8] == 'OT') {
temp[train,13] <- Time_and_Attendance[time, 8]
}
break
}
}
}
plot(temp$ATTENDANCE, temp$VIEWERS)
negatives <- temp[temp$ATTENDANCE == '-1',]
View(negatives)
length(negatives)
size(negatives)
for (1 in nrow(negatives)) { print(++) }
for (train in nrow(negatives)) { print(train) }
for (train in !:nrow(negatives)) { print(train) }
for (train in 1:nrow(negatives)) { print(train) }
for (train in 1:nrow(negatives[negatives$GAME_ID == 21600007])) { print(train) }
temp_time <- Time_and_Attendance
temp_time[temp_time$`Visitor/Neutral` == 'DETs'] <- 'DET'
remove(Time_and_Attendance)
library(readr)
Time_and_Attendance <- read_csv("~/NBA-Hackathon/Business Analytics/Business Analytics/BBREF/Time_and_Attendance.csv",
col_types = cols(Date = col_date(format = "%m %d %Y")))
View(Time_and_Attendance)
temp_time <- Time_and_Attendance[Time_and_Attendance$`Visitor/Neutral` == 'DET' | Time_and_Attendance$`Home/Neutral`== 'DET',]
View(temp_time)
library(readr)
Time_and_Attendance <- read_csv("~/NBA-Hackathon/Business Analytics/Business Analytics/BBREF/Time_and_Attendance.csv",
col_types = cols(Date = col_date(format = "%m %d %Y"),
`Start (ET)` = col_character()))
View(Time_and_Attendance)
temp_time <- Time_and_Attendance[Time_and_Attendance$`Visitor/Neutral` == 'DET' | Time_and_Attendance$`Home/Neutral`== 'DET',]
for (train in 1:nrow(temp)) {
print(train)
for (time in 1:nrow(temp_time)) {
home_factor <- as.character(temp_time[time, 5])
away_factor <- as.character(temp_time[time, 3])
if (temp[train,3] == temp_time[time,1] & temp[train,5] == home_factor & temp[train,4] == away_factor) {
temp[train,10] <- temp_time[time, 2]
temp[train,12] <- temp_time[time, 9]
if (temp_time[time, 8] == 'OT') {
temp[train,13] <- temp_time[time, 8]
}
break
}
}
}
library(readr)
Time_and_Attendance <- read_csv("~/NBA-Hackathon/Business Analytics/Business Analytics/BBREF/Time_and_Attendance.csv",
col_types = cols(Date = col_date(format = "%m %d %Y"), na = empty,
`Start (ET)` = col_character()))
View(Time_and_Attendance)
library(readr)
Time_and_Attendance <- read_csv("~/NBA-Hackathon/Business Analytics/Business Analytics/BBREF/Time_and_Attendance.csv",
col_types = cols(Date = col_date(format = "%m %d %Y"),
Notes = col_skip(), `Start (ET)` = col_character()),
na = "empty")
View(Time_and_Attendance)
temp_time <- Time_and_Attendance[Time_and_Attendance$`Visitor/Neutral` == 'DET' | Time_and_Attendance$`Home/Neutral`== 'DET',]
for (train in 1:nrow(temp)) {
print(train)
for (time in 1:nrow(temp_time)) {
home_factor <- as.character(temp_time[time, 5])
away_factor <- as.character(temp_time[time, 3])
if (temp[train,3] == temp_time[time,1] & temp[train,5] == home_factor & temp[train,4] == away_factor) {
temp[train,10] <- temp_time[time, 2]
temp[train,12] <- temp_time[time, 9]
if (temp_time[time, 8] == 'OT') {
temp[train,13] <- temp_time[time, 8]
}
break
}
}
}
plot(temp$ATTENDANCE, temp$VIEWERS)
# Regression Modeling
k <- 10
n <- nrow(temp)
ii <- (1:n) %% k + 1
set.seed(123)
N <- 50
mape.tr.one <- rep(0, N)
mape.tr.two <- rep(0, N)
mape.tr.full <- rep(0, N)
for(i in 1:N) {
ii <- sample(ii)
pr.tr.one <- rep(0, n)
pr.tr.two <- rep(0, n)
pr.tr.full <- rep(0, n)
print(i)
for(j in 1:k) {
x0 <- temp[ii != j, ]
first_model <- lm(VIEWERS ~ . , data=x0)
second_model <- lm(VIEWERS ~ . , data=x0)
full_model <- lm(VIEWERS ~ . - GAME_ID, data=x0)
pr.tr.one[ ii == j ] <- predict(first_model, newdata=temp[ii==j,])
pr.tr.two[ ii == j ] <- predict(second_model, newdata=temp[ii==j,])
pr.tr.full[ ii == j ] <- predict(full_model, newdata=temp[ii==j,])
}
mape.tr.one[i] <- mean( abs((temp$VIEWERS - pr.tr.one)/temp$VIEWERS) )
mape.tr.two[i] <- mean( abs((temp$VIEWERS - pr.tr.two)/temp$VIEWERS) )
mape.tr.full[i] <- mean( abs((temp$VIEWERS - pr.tr.full)/temp$VIEWERS) )
}
boxplot(mape.tr.one, mape.tr.two, mape.tr.full, names=c('Preliminary Model', 'Secondary Model', 'Full Model'), col=c('gray60', 'pink'), ylab='MAPE')
# Regression Modeling
k <- 50
n <- nrow(temp)
ii <- (1:n) %% k + 1
set.seed(123)
N <- 100
mape.tr.one <- rep(0, N)
mape.tr.two <- rep(0, N)
mape.tr.full <- rep(0, N)
for(i in 1:N) {
ii <- sample(ii)
pr.tr.one <- rep(0, n)
pr.tr.two <- rep(0, n)
pr.tr.full <- rep(0, n)
print(i)
for(j in 1:k) {
x0 <- temp[ii != j, ]
first_model <- lm(VIEWERS ~ . , data=x0)
second_model <- lm(VIEWERS ~ . , data=x0)
full_model <- lm(VIEWERS ~ . - GAME_ID, data=x0)
pr.tr.one[ ii == j ] <- predict(first_model, newdata=temp[ii==j,])
pr.tr.two[ ii == j ] <- predict(second_model, newdata=temp[ii==j,])
pr.tr.full[ ii == j ] <- predict(full_model, newdata=temp[ii==j,])
}
mape.tr.one[i] <- mean( abs((temp$VIEWERS - pr.tr.one)/temp$VIEWERS) )
mape.tr.two[i] <- mean( abs((temp$VIEWERS - pr.tr.two)/temp$VIEWERS) )
mape.tr.full[i] <- mean( abs((temp$VIEWERS - pr.tr.full)/temp$VIEWERS) )
}
boxplot(mape.tr.one, mape.tr.two, mape.tr.full, names=c('Preliminary Model', 'Secondary Model', 'Full Model'), col=c('gray60', 'pink'), ylab='MAPE')
# Regression Modeling
k <- 50
n <- nrow(temp)
ii <- (1:n) %% k + 1
set.seed(123)
N <- 100
mape.tr.one <- rep(0, N)
mape.tr.two <- rep(0, N)
mape.tr.full <- rep(0, N)
for(i in 1:N) {
ii <- sample(ii)
pr.tr.one <- rep(0, n)
pr.tr.two <- rep(0, n)
pr.tr.full <- rep(0, n)
print(i)
for(j in 1:k) {
x0 <- temp[ii != j, ]
first_model <- lm(VIEWERS ~ . , data=x0)
second_model <- lm(VIEWERS ~ . , data=x0)
full_model <- lm(VIEWERS ~ . - GAME_ID, data=x0)
pr.tr.one[ ii == j ] <- predict(first_model, newdata=temp[ii==j,])
pr.tr.two[ ii == j ] <- predict(second_model, newdata=temp[ii==j,])
pr.tr.full[ ii == j ] <- predict(full_model, newdata=temp[ii==j,])
}
mape.tr.one[i] <- mean( abs((temp$VIEWERS - pr.tr.one)/temp$VIEWERS) )
mape.tr.two[i] <- mean( abs((temp$VIEWERS - pr.tr.two)/temp$VIEWERS) )
mape.tr.full[i] <- mean( abs((temp$VIEWERS - pr.tr.full)/temp$VIEWERS) )
}
boxplot(mape.tr.one, mape.tr.two, mape.tr.full, names=c('Preliminary Model', 'Secondary Model', 'Full Model'), col=c('gray60', 'pink'), ylab='MAPE')
# Regression Modeling
k <- 5
n <- nrow(temp)
ii <- (1:n) %% k + 1
set.seed(123)
N <- 100
mape.tr.one <- rep(0, N)
mape.tr.two <- rep(0, N)
mape.tr.full <- rep(0, N)
for(i in 1:N) {
ii <- sample(ii)
pr.tr.one <- rep(0, n)
pr.tr.two <- rep(0, n)
pr.tr.full <- rep(0, n)
print(i)
for(j in 1:k) {
x0 <- temp[ii != j, ]
first_model <- lm(VIEWERS ~ . , data=x0)
second_model <- lm(VIEWERS ~ . , data=x0)
full_model <- lm(VIEWERS ~ . - GAME_ID, data=x0)
pr.tr.one[ ii == j ] <- predict(first_model, newdata=temp[ii==j,])
pr.tr.two[ ii == j ] <- predict(second_model, newdata=temp[ii==j,])
pr.tr.full[ ii == j ] <- predict(full_model, newdata=temp[ii==j,])
}
mape.tr.one[i] <- mean( abs((temp$VIEWERS - pr.tr.one)/temp$VIEWERS) )
mape.tr.two[i] <- mean( abs((temp$VIEWERS - pr.tr.two)/temp$VIEWERS) )
mape.tr.full[i] <- mean( abs((temp$VIEWERS - pr.tr.full)/temp$VIEWERS) )
}
boxplot(mape.tr.one, mape.tr.two, mape.tr.full, names=c('Preliminary Model', 'Secondary Model', 'Full Model'), col=c('gray60', 'pink'), ylab='MAPE')
class(temp$TIME)
write.csv(temp, 'train_with_attendance.csv')

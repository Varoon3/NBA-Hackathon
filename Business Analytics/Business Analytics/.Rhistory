))
data <- rbeta(100, shape1, shape2, ncp=0)
gen(100)
gen <- function(n){
x <- rexp(1)
y <- rbeta(n, exp(-x), 1/x)
}
gen(100)
gen <- function(n){
x <- rexp(n)
y <- rbeta(n, exp(-x),1/x)
pred <- exp(-x) / (exp(-x) + 1/x)
print( mean( (pred - y)^2 ))
}
gen(100)
gen <- function(n){
x <- rexp(n)
y <- rbeta(n, exp(-x),1/x)
pred <- exp(-x) / (exp(-x) + 1/x)
print( mean( (pred - y)^2 ))
}
gen(1000)
gen <- function(n){
x <- rexp(n)
y <- rbeta(n, exp(-x),1/x)
pred <- exp(-x) / (exp(-x) + 1/x)
print( mean( (pred - y)^2 ))
return(results = list(x = x, y = y, pred = pred))
}
gen(1000)
results = gen(1000)
par(mfrow=c(2,1))
plot(x = results$x, y = results$y)
plot(x = results$x, y = results$pred)
par(mfrow=c(1,1))
par(mfrow=c(2,1))
plot(x = results$x, y = results$y)
par(mfrow=c(2,1))
plot(x = results$x, y = results$y)
plot(x = results$x, y = results$pred)
par(mfrow=c(1,1))
set.seed(87)
n <- 200
dat <- tibble(x = c(rnorm(n/2), rnorm(n/2)+5)-3,
y = sin(x^2/5)/x + rnorm(n)/10 + exp(1))
fit <- loess(y ~ x, data=dat, span=0.3)
yhat <- predict(fit)
mean((yhat - dat$y)^2)
n <- 1000
newdat <- tibble(x = c(rnorm(n/2), rnorm(n/2)+5)-3,
y = sin(x^2/5)/x + rnorm(n)/10 + exp(1))
yhat <- predict(fit, newdata = newdat)
mean((yhat - newdat$y)^2, na.rm = TRUE)
library(shiny); runApp('shinyTest.R')
runApp('shinyTest.R')
runApp('shinyTest.R')
runApp('shinyTest.R')
runApp('shinyTest.R')
runApp('shinyTest.R')
runApp('shinyTest.R')
runApp('shinyTest.R')
runApp('shinyTest.R')
runApp('shinyTest.R')
runApp('shinyTest.R')
runApp('shinyTest.R')
runApp('shinyTest.R')
runApp('shinyTest.R')
shiny::runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
shiny::runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
shiny::runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
shiny::runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
install.packages("cancensus")
library(cancensus)
install.packages("devtools")
library(devtools)
install_github(mountainmath/cansim)
install_github(mountainmaths/cansim)
install_github(mountainmath/cansim)
install_github(mountainmath/cansim)
devtools::install_github(mountainmath/cansim)
devtools::install_github(mountainmath/cansim)
devtools::install_github(Mountainmath/cansim)
devtools::install_github(mountainmath/Cansim)
devtools::install_github("mountainmath/cansim")
tables <- get_cansim_changed_tables("2018-06-25") %>% hea
library("cansim")
library(cansim)
library(Cansim)
install.packages("rlang")
library(Cansim)
library(cansim)
devtools::install_github("mountainmath/cansim")
library(cansim)
library("cansim")
tables <- get_cansim_changed_tables("2018-06-25") %>% head
tables <- get_cansim_changed_tables("2018-06-25")
tables$productId
get_cansim_cube_metadata(tables$productId)$cubeTitleEn
View(list_of_cansim_tables)
View(list_of_cansim_table)
View(list_of_cansim_tables)
View(list_cansim_tables)
cansimtables <- list_cansim_tables()
View(cansimtables)
shiny::runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
facility_master <- read.csv('facility_master.csv')
getdw()
getwd()
facility_master <- read.csv('data/facility_master.csv')
facility_master <- read.csv('/data/facility_master.csv')
facility_master <- read.csv('./data/facility_master.csv')
facility_master <- read.csv('.data/facility_master.csv')
facility_master <- read.csv('./data/facility_master.csv')
runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
facility <- read.csv('facility_master')
getwd()
facility <- read.csv('./data/facility_master.csv')
runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
shiny::runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
shiny::runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
shiny::runApp('~/DSSG 2018/ChildrensPartnership/Scripts')
library(readr)
train_with_attendance <- read_csv("~/NBA-Hackathon/Business Analytics/Business Analytics/train_with_attendance.csv",
col_types = cols(GAME_DATE = col_date(format = "%Y-%m-%d"),
X1 = col_skip()))
View(train_with_attendance)
# Regression Modeling
k <- 5
n <- nrow(train_with_attendance)
ii <- (1:n) %% k + 1
set.seed(123)
N <- 100
mape.tr.one <- rep(0, N)
mape.tr.two <- rep(0, N)
mape.tr.full <- rep(0, N)
for(i in 1:N) {
ii <- sample(ii)
pr.tr.one <- rep(0, n)
pr.tr.two <- rep(0, n)
pr.tr.full <- rep(0, n)
print(i)
for(j in 1:k) {
x0 <- train_with_attendance[ii != j, ]
first_model <- lm(VIEWERS ~ . , data=x0)
second_model <- lm(VIEWERS ~ . , data=x0)
full_model <- lm(VIEWERS ~ . - GAME_ID, data=x0)
pr.tr.one[ ii == j ] <- predict(first_model, newdata=train_with_attendance[ii==j,])
pr.tr.two[ ii == j ] <- predict(second_model, newdata=train_with_attendance[ii==j,])
pr.tr.full[ ii == j ] <- predict(full_model, newdata=train_with_attendance[ii==j,])
}
mape.tr.one[i] <- mean( abs((train_with_attendance$VIEWERS - pr.tr.one)/train_with_attendance$VIEWERS) )
mape.tr.two[i] <- mean( abs((train_with_attendance$VIEWERS - pr.tr.two)/train_with_attendance$VIEWERS) )
mape.tr.full[i] <- mean( abs((train_with_attendance$VIEWERS - pr.tr.full)/train_with_attendance$VIEWERS) )
}
boxplot(mape.tr.one, mape.tr.two, mape.tr.full, names=c('Preliminary Model', 'Secondary Model', 'Full Model'), col=c('gray60', 'pink'), ylab='MAPE')
# Regression Modeling
k <- 10
n <- nrow(train_with_attendance)
ii <- (1:n) %% k + 1
set.seed(123)
N <- 100
mape.tr.one <- rep(0, N)
mape.tr.two <- rep(0, N)
mape.tr.full <- rep(0, N)
for(i in 1:N) {
ii <- sample(ii)
pr.tr.one <- rep(0, n)
pr.tr.two <- rep(0, n)
pr.tr.full <- rep(0, n)
print(i)
for(j in 1:k) {
x0 <- train_with_attendance[ii != j, ]
first_model <- lm(VIEWERS ~ . , data=x0)
second_model <- lm(VIEWERS ~ . , data=x0)
full_model <- lm(VIEWERS ~ . - GAME_ID, data=x0)
pr.tr.one[ ii == j ] <- predict(first_model, newdata=train_with_attendance[ii==j,])
pr.tr.two[ ii == j ] <- predict(second_model, newdata=train_with_attendance[ii==j,])
pr.tr.full[ ii == j ] <- predict(full_model, newdata=train_with_attendance[ii==j,])
}
mape.tr.one[i] <- mean( abs((train_with_attendance$VIEWERS - pr.tr.one)/train_with_attendance$VIEWERS) )
mape.tr.two[i] <- mean( abs((train_with_attendance$VIEWERS - pr.tr.two)/train_with_attendance$VIEWERS) )
mape.tr.full[i] <- mean( abs((train_with_attendance$VIEWERS - pr.tr.full)/train_with_attendance$VIEWERS) )
}
boxplot(mape.tr.one, mape.tr.two, mape.tr.full, names=c('Preliminary Model', 'Secondary Model', 'Full Model'), col=c('gray60', 'pink'), ylab='MAPE')
plot(train_with_attendance$VIEWERS, pr.tr.full)
boxplot(train_with_attendance, pr.tr.full)
boxplot(train_with_attendance$VIEWERS, pr.tr.full)
boxplot(train_with_attendance$VIEWERS, pr.tr.two)
boxplot(train_with_attendance$VIEWERS, pr.tr.two, pr.tr.full)
mean( abs((train_with_attendance$VIEWERS - pr.tr.one)/train_with_attendance$VIEWERS) )
mean( abs((train_with_attendance$VIEWERS - pr.tr.two)/train_with_attendance$VIEWERS) )
train_with_attendance$\
train_with_attendance$VIEWERS - pr.tr.one
(train_with_attendance$VIEWERS - pr.tr.one)/train_with_attendance$VIEWERS
abs((train_with_attendance$VIEWERS - pr.tr.one)/train_with_attendance$VIEWERS)
mean(abs((train_with_attendance$VIEWERS - pr.tr.one)/train_with_attendance$VIEWERS))
class(abs((train_with_attendance$VIEWERS - pr.tr.one)/train_with_attendance$VIEWERS))
mean(abs((train_with_attendance$VIEWERS - pr.tr.one)/train_with_attendance$VIEWERS), na.rm = TRUE)
mean(abs((train_with_attendance$VIEWERS - pr.tr.full)/train_with_attendance$VIEWERS), na.rm = TRUE)
train_with_attendance <- read_csv("~/NBA-Hackathon/Business Analytics/Business Analytics/train_with_attendance.csv", col_types = cols(GAME_DATE = col_dat(format = '%Y-%m-%d'), X1 = col_skip()))
library(readr)
train_with_attendance <- read_csv("~/NBA-Hackathon/Business Analytics/Business Analytics/train_with_attendance.csv", col_types = cols(GAME_DATE = col_dat(format = '%Y-%m-%d'), X1 = col_skip()))
setwd("~/NBA-Hackathon/Business Analytics/Business Analytics")
train_with_attendance <- read_csv("~/NBA-Hackathon/Business Analytics/Business Analytics/train_with_attendance.csv", col_types = cols(GAME_DATE = col_dat(format = '%Y-%m-%d'), X1 = col_skip()))
library(readr)
train_with_attendance <- read_csv("~/NBA-Hackathon/Business Analytics/Business Analytics/train_with_attendance.csv",
col_types = cols(GAME_DATE = col_date(format = "%Y-%m-%d"),
X1 = col_skip()))
View(train_with_attendance)
library(MASS)
null <- lm(VIEWERS ~ 1, data=train_with_attendance)
full <- lm(VIEWERS ~ ., data=train_with_attendance)
st <- stepAIC(null, scope=list(lower=null, upper=full), trace=FALSE)
sum(is.na(train_with_attendance$GAME_ID))
sum(is.na(train_with_attendance$SEASON))
sum(is.na(train_with_attendance$OVERTIME))
sum(is.na(train_with_attendance$ATTENDANCE))
sum(is.na(train_with_attendance$BROADCAST))
sum(is.na(train_with_attendance$TIME))
sum(is.na(train_with_attendance$DAY))
sum(is.na(train_with_attendance$HOME_TREND))
sum(is.na(train_with_attendance$AWAY_TREND))
sum(is.na(train_with_attendance$GAME_DATE))
train_with_attendance[train_with_attendance$BROADCAST == NA,]
train_with_attendance[is.na(train_with_attendance$BROADCAST),]
train_with_attendance[is.na(train_with_attendance$BROADCAST), 11] <- 'TNT'
st <- stepAIC(null, scope=list(lower=null, upper=full), trace=FALSE)
st
cor(train_with_attendance$VIEWERS, train_with_attendance$ATTENDANCE)
cor(train_with_attendance$VIEWERS, train_with_attendance$OVERTIME)
plot(train_with_attendance$VIEWERS, train_with_attendance$OVERTIME)
plot(train_with_attendance$VIEWERS, as.factor(train_with_attendance$OVERTIME))
summary(full_model)
# Regression Modeling
k <- 10
n <- nrow(train_with_attendance)
ii <- (1:n) %% k + 1
set.seed(123)
N <- 100
mape.tr.one <- rep(0, N)
mape.tr.two <- rep(0, N)
mape.tr.full <- rep(0, N)
for(i in 1:N) {
ii <- sample(ii)
pr.tr.one <- rep(0, n)
pr.tr.two <- rep(0, n)
pr.tr.full <- rep(0, n)
print(i)
for(j in 1:k) {
x0 <- train_with_attendance[ii != j, ]
first_model <- lm(VIEWERS ~ . , data=x0)
second_model <- lm(VIEWERS ~ (I(AWAY_TEAM %in% c('CLE', 'GSW')) * I(HOME_TEAM %in% c('CLE', 'GSW'))) + (AWAY_TREND * HOME_TREND) + (DAY * TIME * GAME_DATE * SEASON) + BROADCAST + ATTENDANCE + OVERTIME, data=x0)
full_model <- lm(VIEWERS ~ . - GAME_ID, data=x0)
pr.tr.one[ ii == j ] <- predict(first_model, newdata=train_with_attendance[ii==j,])
pr.tr.two[ ii == j ] <- predict(second_model, newdata=train_with_attendance[ii==j,])
pr.tr.full[ ii == j ] <- predict(full_model, newdata=train_with_attendance[ii==j,])
}
mape.tr.one[i] <- mean( abs((train_with_attendance$VIEWERS - pr.tr.one)/train_with_attendance$VIEWERS) )
mape.tr.two[i] <- mean( abs((train_with_attendance$VIEWERS - pr.tr.two)/train_with_attendance$VIEWERS) )
mape.tr.full[i] <- mean( abs((train_with_attendance$VIEWERS - pr.tr.full)/train_with_attendance$VIEWERS) )
}
boxplot(mape.tr.one, mape.tr.two, mape.tr.full, names=c('Preliminary Model', 'Secondary Model', 'Full Model'), col=c('gray60', 'pink'), ylab='MAPE')
summary(first_model)
installed.packages('reshape2')
# Correlation Matrix
cormat <- round(cor(train_with_attendance), 2)
head(cormat)
library(reshape2)
melted_cormat <- melt(cormat)
head(melted_cormat)
library(ggplot2)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
upper_tri
# Melt the correlation matrix
library(reshape2)
melted_cormat <- melt(upper_tri, na.rm = TRUE)
# Heatmap
library(ggplot2)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
class(train_with_attendance)
install.packages("corrr")
library(corrr)
correlate(train_with_attendance)
df <- as.data.frame(train_with_attendance)
cor(df)
class(df)
correlate(df)
df
df <- data.frame(df$GAME_ID, df$VIEWERS, df$ATTENDANCE, df$AWAY_TREND, df$HOME_TREND)
cor(df)
cor(df$df.AWAY_TREND, df$df.HOME_TREND)
cor(df$df.AWAY_TREND, train_with_attendance$AWAY_TEAM)
install.packages("polycor")
library(polycor)
hetcor(train_with_attendance)
df <- as.data.frame(train_with_attendance)
hetcor(df)
df <- data.frame(df$GAME_ID, as.factor(df$SEASON), as.factor(df$GAME_DATE), as.factor(df$AWAY_TEAM), as.factor(df$HOME_TEAM), df$AWAY_TREND, df$HOME_TREND, df$VIEWERS, as.factor(df$DAY), as.factor(df$TIME), as.factor(df$BROADCAST), df$ATTENDANCE, as.logical(df$OVERTIME))
hetcor(df)
class(df)
df <- cbind(df$GAME_ID, as.factor(df$SEASON), as.factor(df$GAME_DATE), as.factor(df$AWAY_TEAM), as.factor(df$HOME_TEAM), df$AWAY_TREND, df$HOME_TREND, df$VIEWERS, as.factor(df$DAY), as.factor(df$TIME), as.factor(df$BROADCAST), df$ATTENDANCE, as.logical(df$OVERTIME))
hetcor(df)
df <- cbind(df$GAME_ID, as.factor(df$SEASON), as.factor(df$GAME_DATE), as.factor(df$AWAY_TEAM), as.factor(df$HOME_TEAM), df$AWAY_TREND, df$HOME_TREND, df$VIEWERS)
df <- data.frame(df$GAME_ID, as.factor(df$SEASON), as.factor(df$GAME_DATE), as.factor(df$AWAY_TEAM), as.factor(df$HOME_TEAM), df$AWAY_TREND, df$HOME_TREND, df$VIEWERS, as.factor(df$DAY), as.factor(df$TIME), as.factor(df$BROADCAST), df$ATTENDANCE, as.logical(df$OVERTIME))
df <- train_with_attendance
df <- cbind(df$GAME_ID, as.factor(df$SEASON), as.factor(df$GAME_DATE), as.factor(df$AWAY_TEAM), as.factor(df$HOME_TEAM), df$AWAY_TREND, df$HOME_TREND, df$VIEWERS)
hetcor(df)
View(df)
st <- stepAIC(null, scope=list(lower=null, upper=second_model), trace=FALSE)
st
# Regression Modeling
k <- 10
n <- nrow(train_with_attendance)
ii <- (1:n) %% k + 1
set.seed(123)
N <- 100
mape.tr.one <- rep(0, N)
mape.tr.two <- rep(0, N)
mape.tr.full <- rep(0, N)
for(i in 1:N) {
ii <- sample(ii)
pr.tr.one <- rep(0, n)
pr.tr.two <- rep(0, n)
pr.tr.full <- rep(0, n)
print(i)
for(j in 1:k) {
x0 <- train_with_attendance[ii != j, ]
first_model <- lm(VIEWERS ~ . , data=x0)
second_model <- lm(VIEWERS ~ I(AWAY_TEAM %in% c("CLE", "GSW")) + I(HOME_TEAM %in%
c("CLE", "GSW")) + BROADCAST + OVERTIME + TIME + ATTENDANCE +
AWAY_TREND + DAY + GAME_DATE + SEASON + HOME_TREND + DAY:SEASON +
DAY:GAME_DATE + I(AWAY_TEAM %in% c("CLE", "GSW")):I(HOME_TEAM %in%
c("CLE", "GSW")) + TIME:GAME_DATE, data=x0)
full_model <- lm(VIEWERS ~ . - GAME_ID, data=x0)
pr.tr.one[ ii == j ] <- predict(first_model, newdata=train_with_attendance[ii==j,])
pr.tr.two[ ii == j ] <- predict(second_model, newdata=train_with_attendance[ii==j,])
pr.tr.full[ ii == j ] <- predict(full_model, newdata=train_with_attendance[ii==j,])
}
mape.tr.one[i] <- mean( abs((train_with_attendance$VIEWERS - pr.tr.one)/train_with_attendance$VIEWERS) )
mape.tr.two[i] <- mean( abs((train_with_attendance$VIEWERS - pr.tr.two)/train_with_attendance$VIEWERS) )
mape.tr.full[i] <- mean( abs((train_with_attendance$VIEWERS - pr.tr.full)/train_with_attendance$VIEWERS) )
}
boxplot(mape.tr.one, mape.tr.two, mape.tr.full, names=c('Preliminary Model', 'Secondary Model', 'Full Model'), col=c('gray60', 'pink'), ylab='MAPE')
boxplot(train_with_attendance$VIEWERS, pr.tr.two)
boxplot(train_with_attendance$VIEWERS, pr.tr.two, pr.tr.one)
hetcor(train_with_attendance$VIEWERS, as.factor(train_with_attendance$BROADCAST))
hetcor(train_with_attendance$VIEWERS, as.factor(train_with_attendance$DAY))
hetcor(train_with_attendance$VIEWERS, as.factor(train_with_attendance$TIME))
hetcor(train_with_attendance$VIEWERS, train_with_attendance$TIME)
hetcor(train_with_attendance$VIEWERS, as.numeric(train_with_attendance$TIME))
hetcor(train_with_attendance$VIEWERS, as.numeric(train_with_attendance$AWAY_TEAM))
hetcor(train_with_attendance$VIEWERS, as.factor(train_with_attendance$AWAY_TEAM))
hetcor(train_with_attendance$VIEWERS, as.factor(train_with_attendance$AWAY_TEAM) * as.factor(train_with_attendance$HOME_TEAM))
hetcor(train_with_attendance$VIEWERS, as.factor(train_with_attendance$OVERTIME))
library(readr)
game_data <- read_csv("~/NBA-Hackathon/Business Analytics/Business Analytics/game_data.csv")
View(game_data)
train_with_wins_entering <- data.frame(train_with_attendance$GAME_ID, as.character(train_with_attendance$SEASON), train_with_attendance$GAME_DATE, as.character(train_with_attendance$AWAY_TEAM), as.character(train_edit_df$HOME_TEAM), train_edit_df$AWAY_TREND, train_with_attendance$HOME_TREND, train_with_attendance$VIEWERS, train_with_attendance$DAY, train_with_attendance$TIME, train_with_attendance$BROADCAST, train_with_attendance$ATTENDANCE, train_with_attendance$OVERTIME, -1, -1)
names(train_with_wins_entering) <- c('GAME_ID', 'SEASON', 'GAME_DATE', 'AWAY_TEAM', 'HOME_TEAM', 'AWAY_TREND', 'HOME_TREND', 'VIEWERS', 'DAY', 'TIME', 'BROADCAST', 'ATTENDANCE', 'OVERTIME', 'WIN_ENTER_HOME', 'WIN_ENTER_AWAY')
train_with_wins_entering <- data.frame(train_with_attendance$GAME_ID, as.character(train_with_attendance$SEASON), train_with_attendance$GAME_DATE, as.character(train_with_attendance$AWAY_TEAM), as.character(train_edit_df$HOME_TEAM), train_edit_df$AWAY_TREND, train_with_attendance$HOME_TREND, train_with_attendance$VIEWERS, train_with_attendance$DAY, train_with_attendance$TIME, train_with_attendance$BROADCAST, train_with_attendance$ATTENDANCE, train_with_attendance$OVERTIME, -1, -1)
# Wins Entering Addition
train_with_wins_entering <- data.frame(train_with_attendance$GAME_ID, as.character(train_with_attendance$SEASON), train_with_attendance$GAME_DATE, as.character(train_with_attendance$AWAY_TEAM), as.character(train_with_wins_entering$HOME_TEAM), train_with_wins_entering$AWAY_TREND, train_with_attendance$HOME_TREND, train_with_attendance$VIEWERS, train_with_attendance$DAY, train_with_attendance$TIME, train_with_attendance$BROADCAST, train_with_attendance$ATTENDANCE, train_with_attendance$OVERTIME, -1, -1)
names(train_with_wins_entering) <- c('GAME_ID', 'SEASON', 'GAME_DATE', 'AWAY_TEAM', 'HOME_TEAM', 'AWAY_TREND', 'HOME_TREND', 'VIEWERS', 'DAY', 'TIME', 'BROADCAST', 'ATTENDANCE', 'OVERTIME', 'WIN_ENTER_HOME', 'WIN_ENTER_AWAY')
train_with_wins_entering <- data.frame(train_with_attendance$GAME_ID, as.character(train_with_attendance$SEASON), train_with_attendance$GAME_DATE, as.character(train_with_attendance$AWAY_TEAM), as.character(train_with_wins_entering$HOME_TEAM), train_with_wins_entering$AWAY_TREND, train_with_attendance$HOME_TREND, train_with_attendance$VIEWERS, train_with_attendance$DAY, train_with_attendance$TIME, train_with_attendance$BROADCAST, train_with_attendance$ATTENDANCE, train_with_attendance$OVERTIME, -1, -1)
train_with_wins_entering <- data.frame(train_with_attendance$GAME_ID, as.character(train_with_attendance$SEASON), train_with_attendance$GAME_DATE, as.character(train_with_attendance$AWAY_TEAM), as.character(train_with_attendance$HOME_TEAM), train_with_attendance$AWAY_TREND, train_with_attendance$HOME_TREND, train_with_attendance$VIEWERS, train_with_attendance$DAY, train_with_attendance$TIME, train_with_attendance$BROADCAST, train_with_attendance$ATTENDANCE, train_with_attendance$OVERTIME, -1, -1)
names(train_with_wins_entering) <- c('GAME_ID', 'SEASON', 'GAME_DATE', 'AWAY_TEAM', 'HOME_TEAM', 'AWAY_TREND', 'HOME_TREND', 'VIEWERS', 'DAY', 'TIME', 'BROADCAST', 'ATTENDANCE', 'OVERTIME', 'WIN_ENTER_HOME', 'WIN_ENTER_AWAY')
View(train_with_wins_entering)
game_data[game_data$Game_ID == 21600004, ]
game_data[game_data$Game_ID == 21600004 & game_data$Location == 'A', ]
for (train in 1:nrow(train_with_wins_entering)) {
game_id <- train_with_wins_entering[train, 1]
train_with_wins_entering[train, 15] <- game_data[game_data$Game_ID == game_id & game_data$Location == 'A', 6]
}
for (train in 1:nrow(train_with_wins_entering)) {
game_id <- train_with_wins_entering[train, 1]
train_with_wins_entering[train, 14] <- game_data[game_data$Game_ID == game_id & game_data$Location == 'H', 6]
}
View(train_with_wins_entering)
# Regression Modeling
k <- 10
n <- nrow(train_with_wins_entering)
ii <- (1:n) %% k + 1
set.seed(123)
N <- 100
mape.tr.one <- rep(0, N)
mape.tr.two <- rep(0, N)
mape.tr.full <- rep(0, N)
for(i in 1:N) {
ii <- sample(ii)
pr.tr.one <- rep(0, n)
pr.tr.two <- rep(0, n)
pr.tr.full <- rep(0, n)
print(i)
for(j in 1:k) {
x0 <- train_with_wins_entering[ii != j, ]
first_model <- lm(VIEWERS ~ . , data=x0)
second_model <- lm(VIEWERS ~ I(AWAY_TEAM %in% c("CLE", "GSW")) + I(HOME_TEAM %in%
c("CLE", "GSW")) + BROADCAST + OVERTIME + TIME + ATTENDANCE +
AWAY_TREND + DAY + GAME_DATE + SEASON + HOME_TREND + DAY:SEASON +
DAY:GAME_DATE + I(AWAY_TEAM %in% c("CLE", "GSW")):I(HOME_TEAM %in%
c("CLE", "GSW")) + TIME:GAME_DATE, data=x0)
full_model <- lm(VIEWERS ~ . - GAME_ID, data=x0)
pr.tr.one[ ii == j ] <- predict(first_model, newdata=train_with_wins_entering[ii==j,])
pr.tr.two[ ii == j ] <- predict(second_model, newdata=train_with_wins_entering[ii==j,])
pr.tr.full[ ii == j ] <- predict(full_model, newdata=train_with_wins_entering[ii==j,])
}
mape.tr.one[i] <- mean( abs((train_with_wins_entering$VIEWERS - pr.tr.one)/train_with_wins_entering$VIEWERS) )
mape.tr.two[i] <- mean( abs((train_with_wins_entering$VIEWERS - pr.tr.two)/train_with_wins_entering$VIEWERS) )
mape.tr.full[i] <- mean( abs((train_with_wins_entering$VIEWERS - pr.tr.full)/train_with_wins_entering$VIEWERS) )
}
boxplot(mape.tr.one, mape.tr.two, mape.tr.full, names=c('Preliminary Model', 'Secondary Model', 'Full Model'), col=c('gray60', 'pink'), ylab='MAPE')
View(train_with_wins_entering)
boxplot(train_with_wins_entering$VIEWERS, pr.tr.one)
boxplot(train_with_wins_entering$VIEWERS, pr.tr.full)
boxplot(train_with_wins_entering$VIEWERS, pr.tr.two)
boxplot(mape.tr.one, mape.tr.two, mape.tr.full, names=c('Preliminary Model', 'Secondary Model', 'Full Model'), col=c('gray60', 'pink'), ylab='MAPE')
cor(train_with_wins_entering$VIEWERS, train_with_wins_entering$WIN_ENTER_HOME)
cor(train_with_wins_entering$VIEWERS, train_with_wins_entering$WIN_ENTER_AWAY)
cor(train_with_wins_entering$WIN_ENTER_HOME, train_with_wins_entering$WIN_ENTER_AWAY)
train_with_win_lead <- data.frame(train_with_wins_entering$GAME_ID, as.character(train_with_wins_entering$SEASON), train_with_wins_entering$GAME_DATE, as.character(train_with_wins_entering$AWAY_TEAM), as.character(train_with_wins_entering$HOME_TEAM), train_with_wins_entering$AWAY_TREND, train_with_wins_entering$HOME_TREND, train_with_wins_entering$VIEWERS, train_with_wins_entering$DAY, train_with_attendance$TIME, train_with_wins_entering$BROADCAST, train_with_wins_entering$ATTENDANCE, train_with_wins_entering$OVERTIME, train_with_wins_entering$WIN_ENTER_HOME, train_with_wins_entering$WIN_ENTER_AWAY, -1, -1, -1, -1, -1, -1)
names(train_with_win_lead) <- c('GAME_ID', 'SEASON', 'GAME_DATE', 'AWAY_TEAM', 'HOME_TEAM', 'AWAY_TREND', 'HOME_TREND', 'VIEWERS', 'DAY', 'TIME', 'BROADCAST', 'ATTENDANCE', 'OVERTIME', 'WIN_ENTER_HOME', 'WIN_ENTER_AWAY', 'LEAD_CHANGE_H', 'LEAD_CHANGE_A', 'TIES_H', 'TIES_A', 'LARGEST_LEAD_H', 'LARGEST_LEAD_A')
View(train_with_wins_entering)
View(train_with_win_lead)
for (train in 1:nrow(train_with_win_lead)) {
game_id <- train_with_win_lead[train, 1]
train_with_win_lead[train, 16] <- game_data[game_data$Game_ID == game_id & game_data$Location == 'H', 10]
train_with_win_lead[train, 18] <- game_data[game_data$Game_ID == game_id & game_data$Location == 'H', 11]
train_with_win_lead[train, 20] <- game_data[game_data$Game_ID == game_id & game_data$Location == 'H', 12]
}
for (train in 1:nrow(train_with_win_lead)) {
game_id <- train_with_win_lead[train, 1]
train_with_win_lead[train, 17] <- game_data[game_data$Game_ID == game_id & game_data$Location == 'A', 10]
train_with_win_lead[train, 19] <- game_data[game_data$Game_ID == game_id & game_data$Location == 'A', 11]
train_with_win_lead[train, 21] <- game_data[game_data$Game_ID == game_id & game_data$Location == 'A', 12]
}
# Regression Modeling
k <- 10
n <- nrow(train_with_win_lead)
ii <- (1:n) %% k + 1
set.seed(123)
N <- 100
mape.tr.one <- rep(0, N)
mape.tr.two <- rep(0, N)
mape.tr.full <- rep(0, N)
for(i in 1:N) {
ii <- sample(ii)
pr.tr.one <- rep(0, n)
pr.tr.two <- rep(0, n)
pr.tr.full <- rep(0, n)
print(i)
for(j in 1:k) {
x0 <- train_with_win_lead[ii != j, ]
first_model <- lm(VIEWERS ~ . , data=x0)
second_model <- lm(VIEWERS ~ I(AWAY_TEAM %in% c("CLE", "GSW")) + I(HOME_TEAM %in%
c("CLE", "GSW")) + BROADCAST + OVERTIME + TIME + ATTENDANCE +
AWAY_TREND + DAY + GAME_DATE + SEASON + HOME_TREND + DAY:SEASON +
DAY:GAME_DATE + I(AWAY_TEAM %in% c("CLE", "GSW")):I(HOME_TEAM %in%
c("CLE", "GSW")) + TIME:GAME_DATE, data=x0)
full_model <- lm(VIEWERS ~ . - GAME_ID, data=x0)
pr.tr.one[ ii == j ] <- predict(first_model, newdata=train_with_win_lead[ii==j,])
pr.tr.two[ ii == j ] <- predict(second_model, newdata=train_with_win_lead[ii==j,])
pr.tr.full[ ii == j ] <- predict(full_model, newdata=train_with_win_lead[ii==j,])
}
mape.tr.one[i] <- mean( abs((train_with_win_lead$VIEWERS - pr.tr.one)/train_with_win_lead$VIEWERS) )
mape.tr.two[i] <- mean( abs((train_with_win_lead$VIEWERS - pr.tr.two)/train_with_win_lead$VIEWERS) )
mape.tr.full[i] <- mean( abs((train_with_win_lead$VIEWERS - pr.tr.full)/train_with_win_lead$VIEWERS) )
}
boxplot(mape.tr.one, mape.tr.two, mape.tr.full, names=c('Preliminary Model', 'Secondary Model', 'Full Model'), col=c('gray60', 'pink'), ylab='MAPE')
boxplot(train_with_win_lead$VIEWERS, pr.tr.one)
summary(first_model)
write.csv(train_with_win_lead, 'train_with_win_lead.csv')

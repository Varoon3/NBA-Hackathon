mspe.totaltwo <- rep(0, N)
for(i in 1:N) {
ii <- sample(ii)
predictTotalCanUSA <- rep(0, n)
predictTotalSimple <- rep(0, n)
predictTotalTwo <- rep(0, n)
for(j in 1:k) {
x0 <- test[ii != j, ]
predictTotalCanUSA[ ii == j ] <- predict(my_model, newdata = test[ii==j,])
predictTotalTwo[ ii == j ] <- predict(top_model_two, newdata = test[ii==j,])
predictTotalSimple [ ii == j ] <- predict(top_model, newdata = test[ii==j,])
}
mspe.totalcan[i] <- mean( (log(test$CURRENT_DISPLAY_PRICE) - predictTotalCanUSA)^2 )
mspe.totaltwo[i] <- mean( (log(test$CURRENT_DISPLAY_PRICE) - predictTotalTwo)^2 )
mspe.totalsimple[i] <- mean( (log(test$CURRENT_DISPLAY_PRICE) - predictTotalSimple)^2 )
}
boxplot(mspe.totalcan, mspe.totaltwo, mspe.totalsimple,
names=c('Full-Canada and USA','Full-Two','Full-Simple'),
col=c('gray60', 'pink', 'blue'), ylab='MSPE')
test <- sample_n(bcl, 55)
k <- 10
n <- nrow(test)
ii <- (1:n) %% k + 1
set.seed(123)
N <- 50
mspe.totalcan <- rep(0, N)
mspe.totalsimple <- rep(0, N)
mspe.totaltwo <- rep(0, N)
for(i in 1:N) {
ii <- sample(ii)
predictTotalCanUSA <- rep(0, n)
predictTotalSimple <- rep(0, n)
predictTotalTwo <- rep(0, n)
for(j in 1:k) {
x0 <- test[ii != j, ]
predictTotalCanUSA[ ii == j ] <- predict(my_model, newdata = test[ii==j,])
predictTotalTwo[ ii == j ] <- predict(top_model_two, newdata = test[ii==j,])
predictTotalSimple [ ii == j ] <- predict(top_model, newdata = test[ii==j,])
}
mspe.totalcan[i] <- mean( (log(test$CURRENT_DISPLAY_PRICE) - predictTotalCanUSA)^2 )
mspe.totaltwo[i] <- mean( (log(test$CURRENT_DISPLAY_PRICE) - predictTotalTwo)^2 )
mspe.totalsimple[i] <- mean( (log(test$CURRENT_DISPLAY_PRICE) - predictTotalSimple)^2 )
}
boxplot(mspe.totalcan, mspe.totaltwo, mspe.totalsimple,
names=c('Full-Canada and USA','Full-Two','Full-Simple'),
col=c('gray60', 'pink', 'blue'), ylab='MSPE')
test <- sample_n(bcl, 55)
k <- 10
n <- nrow(test)
ii <- (1:n) %% k + 1
set.seed(123)
N <- 50
mspe.totalcan <- rep(0, N)
mspe.totalsimple <- rep(0, N)
mspe.totaltwo <- rep(0, N)
for(i in 1:N) {
ii <- sample(ii)
predictTotalCanUSA <- rep(0, n)
predictTotalSimple <- rep(0, n)
predictTotalTwo <- rep(0, n)
for(j in 1:k) {
x0 <- test[ii != j, ]
predictTotalCanUSA[ ii == j ] <- predict(my_model, newdata = test[ii==j,])
predictTotalTwo[ ii == j ] <- predict(top_model_two, newdata = test[ii==j,])
predictTotalSimple [ ii == j ] <- predict(top_model, newdata = test[ii==j,])
}
mspe.totalcan[i] <- mean( (log(test$CURRENT_DISPLAY_PRICE) - predictTotalCanUSA)^2 )
mspe.totaltwo[i] <- mean( (log(test$CURRENT_DISPLAY_PRICE) - predictTotalTwo)^2 )
mspe.totalsimple[i] <- mean( (log(test$CURRENT_DISPLAY_PRICE) - predictTotalSimple)^2 )
}
boxplot(mspe.totalcan, mspe.totaltwo, mspe.totalsimple,
names=c('Full-Canada and USA','Full-Two','Full-Simple'),
col=c('gray60', 'pink', 'blue'), ylab='MSPE')
test <- sample_n(bcl, 35)
k <- 10
n <- nrow(test)
ii <- (1:n) %% k + 1
set.seed(123)
N <- 50
mspe.totalcan <- rep(0, N)
mspe.totalsimple <- rep(0, N)
mspe.totaltwo <- rep(0, N)
for(i in 1:N) {
ii <- sample(ii)
predictTotalCanUSA <- rep(0, n)
predictTotalSimple <- rep(0, n)
predictTotalTwo <- rep(0, n)
for(j in 1:k) {
x0 <- test[ii != j, ]
predictTotalCanUSA[ ii == j ] <- predict(my_model, newdata = test[ii==j,])
predictTotalTwo[ ii == j ] <- predict(top_model_two, newdata = test[ii==j,])
predictTotalSimple [ ii == j ] <- predict(top_model, newdata = test[ii==j,])
}
mspe.totalcan[i] <- mean( (log(test$CURRENT_DISPLAY_PRICE) - predictTotalCanUSA)^2 )
mspe.totaltwo[i] <- mean( (log(test$CURRENT_DISPLAY_PRICE) - predictTotalTwo)^2 )
mspe.totalsimple[i] <- mean( (log(test$CURRENT_DISPLAY_PRICE) - predictTotalSimple)^2 )
}
boxplot(mspe.totalcan, mspe.totaltwo, mspe.totalsimple,
names=c('Full-Canada and USA','Full-Two','Full-Simple'),
col=c('gray60', 'pink', 'blue'), ylab='MSPE')
write.csv(test)
write.csv(test, file = "instanceWhichIdobetter")
m100=c(11.76, 11.2, 11.15, 11.22, 12.25, 11.16, 11.96, 12.23, 10.81, 12.9, 11.42, 11.45, 12.25, 11.84, 11.25, 11.89, 12.74, 11.46, 12.14, 11.13, 11.98, 11.55, 11.01, 11.43, 11.45, 11.95, 11.29, 11.58, 11, 11.85, 10.79, 12.3, 11.75, 11.96, 12.03, 11.06, 11.61, 11.73, 11.44, 11.76, 12, 11.41, 11, 11.79, 11.8, 11.13, 11.73, 11.09, 11.31, 11.45, 11.79, 11.95, 11.81, 11.43)
m200=c(25.08, 22.35, 22.59, 22.62, 25.07, 22.82, 24.6, 24.21, 21.71, 27.1, 23.52, 23.57, 25.78, 24.54, 22.81, 23.62, 25.85, 23.05, 24.47, 22.39, 24.44, 23.13, 22.39, 23.09, 23.06, 24.28, 23, 23.31, 22.13, 24.24, 21.83, 25, 24.46, 24.49, 24.96, 22.19, 22.94, 23.88, 23.46, 23.54, 24.52, 23.04, 22.25, 24.05, 23.98, 22.21, 24, 21.97, 23.17, 23.31, 24.08, 24.41, 24.22, 23.51)
m400=c(58.1, 51.08, 51.73, 52.5, 56.96, 51.79, 58.25, 55.09, 48.16, 60.4, 53.6, 54.9, 51.2, 56.09, 52.38, 53.76, 58.73, 53.3, 55, 50.14, 56.45, 51.6, 49.75, 50.62, 51.5, 53.6, 52.01, 53.12, 50.46, 55.34, 50.62, 55.08, 55.8, 55.7, 56.1, 49.19, 54.5, 52.7, 51.2, 54.6, 54.9, 52, 50.06, 56.05, 53.59, 49.29, 53.73, 47.99, 52.8, 53.11, 54.93, 54.97, 54.3, 53.24)
m800=c(2.27, 1.98, 2, 2.1, 2.24, 2.02, 2.21, 2.19, 1.93, 2.3, 2.03, 2.1, 1.97, 2.28, 1.99, 2.04, 2.33, 2.16, 2.18, 2.03, 2.15, 2.02, 1.95, 1.99, 2.01, 2.1, 1.96, 2.03, 1.98, 2.22, 1.96, 2.12, 2.2, 2.15, 2.07, 1.89, 2.15, 2, 1.92, 2.19, 2.05, 2, 2, 2.24, 2.05, 1.95, 2.09, 1.89, 2.1, 2.02, 2.07, 2.08, 2.09, 2.05)
m1500=c(4.79, 4.13, 4.14, 4.38, 4.84, 4.12, 4.68, 4.69, 3.96, 4.84, 4.18, 4.25, 4.25, 4.86, 4.06, 4.25, 5.81, 4.58, 4.45, 4.1, 4.37, 4.18, 4.03, 4.22, 4.14, 4.32, 3.98, 4.01, 4.03, 4.61, 3.95, 4.52, 4.72, 4.42, 4.38, 3.87, 4.43, 4.15, 3.96, 4.6, 4.23, 4.14, 4.06, 4.74, 4.14, 3.99, 4.35, 4.14, 4.49, 4.07, 4.35, 4.33, 4.16, 4.11)
m3000=c(10.9, 9.08, 8.98, 9.63, 10.69, 8.84, 10.43, 10.46, 8.75, 11.1, 8.71, 9.37, 9.35, 10.54, 9.01, 9.59, 13.04, 9.81, 9.51, 8.92, 9.38, 8.76, 8.59, 9.34, 8.98, 9.98, 8.63, 8.53, 8.62, 10.02, 8.5, 9.94, 10.28, 9.62, 9.64, 8.45, 9.79, 9.2, 8.53, 10.16, 9.37, 8.88, 8.81, 9.89, 9.02, 8.97, 9.2, 8.92, 9.77, 8.77, 9.87, 9.31, 8.84, 8.89)
marathon=c(261.13, 152.37, 155.27, 177.87, 233, 154.48, 171.8, 182.17, 157.68, 233.22, 151.75, 160.48, 179.17, 215.08, 152.48, 158.53, 306, 169.98, 191.02, 154.23, 201.08, 145.48, 148.53, 159.37, 156.37, 188.03, 151.82, 145.48, 149.72, 201.28, 142.72, 182.77, 168.45, 164.65, 174.68, 151.22, 178.52, 181.05, 165.45, 200.37, 171.38, 157.85, 149.45, 203.88, 162.6, 160.82, 150.5, 158.85, 168.75, 153.42, 182.2, 168.48, 151.2, 149.38)
country=c('mauritiu', 'australi', 'france', 'taipei', 'png', 'sweden', 'costa', 'malaysia', 'gdr', 'cookis', 'denmark', 'israel', 'dprkorea', 'guatemal', 'netherla', 'mexico', 'wsamoa', 'bermuda', 'burma', 'finland', 'turkey', 'nz', 'frg', 'austria', 'hungary', 'india', 'italy', 'norway', 'gbni', 'indonesi', 'usa', 'singapor', 'thailand', 'korea', 'luxembou', 'ussr', 'argentin', 'kenya', 'rumania', 'philippi', 'chile', 'belgium', 'canada', 'domrep', 'spain', 'poland', 'japan', 'czech', 'brazil', 'switzerl', 'greece', 'china', 'portugal', 'ireland')
track=data.frame(m100,m200,m400,m800,m1500,m3000,marathon)
print(cov(track))
print(cor(track))
pca.cov=princomp(track,cor=F,scores=T)
print(summary(pca.cov))
print(pca.cov$loadings)
print(summary(pca.cor))
pca.cor=princomp(track,cor=T,scores=T)
print(summary(pca.cor))
speed=track
speed[,1]=100/track[,1];
speed[,2]=200/track[,2];
speed[,3]=400/track[,3];
speed[,4]=800/(60*track[,4]);
speed[,5]=1500/(60*track[,5]);
speed[,6]=3000/(60*track[,6]);
speed[,7]=42195/(60*track[,7])
print(cov(speed)); print(cor(speed))
print(summary(speed))
pca2.cov=princomp(speed,cor=F,scores=T)
print(summary(pca2.cov))
print(pca2.cov$loadings)
print(summary(pca.cor))
print(pca.cor$loadings)
setwd()
setwd("~/DSSG 2018/Scripts")
install.packages("ggplot2")
library(ggplot2)
data("mtcars")
mtcars
data(mpg)
mpg
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
install.packages("colorspace")
library(ggplot2)
mpg
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
data(mtcars)
filter(mtcards, cyl<8) %>% boxplot(mpg~cyl, data=.)
filter(mtcars, cyl<8) %>% boxplot(mpg~cyl, data=.)
mtcars %>% filter(cyl<8) %>% ggplot(aes(factor(cyl), mpg)) + geom_boxplot()
library(ggplot2)
mtcars %>% filter(cyl<8) %>% ggplot(aes(factor(cyl), mpg)) + geom_boxplot()
mtcars
filter(mtcars, gear==5, am==1) %>% select(mtcars,mpg, wt)
filter(mtcars, gear==5, am==0) %>% select(mtcars,mpg, wt)
filter(mtcars, gear==5, am==0) %>% select(mpg, wt)
mtcars %>% filter(mtcars, gear==5, am==0) %>% select(mpg, wt)
filter(mtcars, gear==5, am==0) %>% select(mpg, wt)
filter(mtcars, gear==5, am=0)
filter(mtcars, gear==5, am==0)
filter(mtcars, gear==5, am==1)
filter(mtcars, gear==5, am==1) %>% select(mpg, wt)
filter(mtcars, gear==5 | am==1) %>% select(mpg, wt)
install.packages("nycflights13")
nycflights13
library(nycflights13)
data(nycflights13)
nycflights13::\
nycflights13::airlines
nycflights13::flights
data <- nycflights13::flights
select(data, dep_delay)
arrange(data, dep_delay)
nycflights13::planes
summary(data)
filter(data, dep_delay > 1000) %>% select(carrier)
filter(data, dep_delay > 1000) %>% arrange(dep_delay) %>% select(carrier)
max(data$dep_delay)
mutate(data, caught = abs(dep_delay - arr_delay)) %>% arrange(caught)
mutate(data, caught = abs(dep_delay - arr_delay)) %>% arrange(caught) %>% select(caught, carrier)
mutate(data, caught = abs(dep_delay - arr_delay)) %>% arrange(caught) %>% select(caught, carrier)
mutate(data, caught = abs(dep_delay - arr_delay)) %>% arrange(desc(caught)) %>% select(caught, carrier)
dat <- mutate(dat,
yhat = 5,
yhat1 = 5-x1,
yhat2 = 5+2*x2,
yhat12 = 5-x1+2*x2)
install.packages("tidyverse")
library(tidyverse)
dat <- mutate(dat,
yhat = 5,
yhat1 = 5-x1,
yhat2 = 5+2*x2,
yhat12 = 5-x1+2*x2)
dat <- mutate(dat,
yhat = 5,
yhat1 = 5-x1,
yhat2 = 5+2*x2,
yhat12 = 5-x1+2*x2)
library(dplyr)
dat <- mutate(dat,
yhat = 5,
yhat1 = 5-x1,
yhat2 = 5+2*x2,
yhat12 = 5-x1+2*x2)
genreg <- function(n){
x1 <- rnorm(n)
x2 <- rnorm(n)
eps <- rnorm(n)
y <- 5-x1+2*x2+eps
tibble(x1=x1, x2=x2, y=y)
}
dat <- genreg(1000)
dat <- mutate(dat,
yhat = 5,
yhat1 = 5-x1,
yhat2 = 5+2*x2,
yhat12 = 5-x1+2*x2)
(mse <- mean((dat$yhat - dat$y)^2))
(mse1 <- mean((dat$yhat1 - dat$y)^2))
(mse2 <- mean((dat$yhat2 - dat$y)^2))
(mse12 <- mean((dat$yhat12 - dat$y)^2))
knitr::kable(tribble(
~ Case, ~ MSE,
"No predictors", mse,
"Only X1", mse1,
"Only X2", mse2,
"Both X1 and X2", mse12
))
data <- rbeta(100, shape1, shape2, ncp=0)
gen(100)
gen <- function(n){
x <- rexp(1)
y <- rbeta(n, exp(-x), 1/x)
}
gen(100)
gen <- function(n){
x <- rexp(n)
y <- rbeta(n, exp(-x),1/x)
pred <- exp(-x) / (exp(-x) + 1/x)
print( mean( (pred - y)^2 ))
}
gen(100)
gen <- function(n){
x <- rexp(n)
y <- rbeta(n, exp(-x),1/x)
pred <- exp(-x) / (exp(-x) + 1/x)
print( mean( (pred - y)^2 ))
}
gen(1000)
gen <- function(n){
x <- rexp(n)
y <- rbeta(n, exp(-x),1/x)
pred <- exp(-x) / (exp(-x) + 1/x)
print( mean( (pred - y)^2 ))
return(results = list(x = x, y = y, pred = pred))
}
gen(1000)
results = gen(1000)
par(mfrow=c(2,1))
plot(x = results$x, y = results$y)
plot(x = results$x, y = results$pred)
par(mfrow=c(1,1))
par(mfrow=c(2,1))
plot(x = results$x, y = results$y)
par(mfrow=c(2,1))
plot(x = results$x, y = results$y)
plot(x = results$x, y = results$pred)
par(mfrow=c(1,1))
set.seed(87)
n <- 200
dat <- tibble(x = c(rnorm(n/2), rnorm(n/2)+5)-3,
y = sin(x^2/5)/x + rnorm(n)/10 + exp(1))
fit <- loess(y ~ x, data=dat, span=0.3)
yhat <- predict(fit)
mean((yhat - dat$y)^2)
n <- 1000
newdat <- tibble(x = c(rnorm(n/2), rnorm(n/2)+5)-3,
y = sin(x^2/5)/x + rnorm(n)/10 + exp(1))
yhat <- predict(fit, newdata = newdat)
mean((yhat - newdat$y)^2, na.rm = TRUE)
library(shiny); runApp('shinyTest.R')
runApp('shinyTest.R')
runApp('shinyTest.R')
runApp('shinyTest.R')
runApp('shinyTest.R')
runApp('shinyTest.R')
runApp('shinyTest.R')
runApp('shinyTest.R')
runApp('shinyTest.R')
runApp('shinyTest.R')
runApp('shinyTest.R')
runApp('shinyTest.R')
runApp('shinyTest.R')
runApp('shinyTest.R')
setwd("C:/Users/my_ma/Documents/NBA-Hackathon/Business Analytics/Business Analytics")
data.tr <- read.csv('training_set.csv')
data.te <- read.csv('test_set.csv')
player <- read.csv('player_data.csv')
game <- read.csv('game_data.csv')
train <- read.csv('train.clean.csv')
trend <- read.csv('GoogleTrendTest.csv')
View(trend)
trend2 <- trend[-1,]
remove(trend2)
names(trend) <- c('Week', 'Team')
experience = exp
trend2 <- cbind(experience, trend)
remove(experience)
week <- trend[0,]
week <- trend[,0]
View(week)
trend2 <- cbind(trend, week)
View(trend2)
trend2 <- cbind(trend, week, week)
View(trend2)
View(trend2)
names(week) <- c('Day')
View(trend2)
trend3 <- read.table('GoogleTrendTest.csv', header=T)
trend3 <- read.table('GoogleTrendTest.csv', header=T, sep=',')
View(trend3)
trend3 <- read.table('GoogleTrendTest.csv', header=T, sep='')
View(trend3)
trend3 <- read.table('GoogleTrendTest.csv', header=T, sep=', ')
trend3 <- read.table('GoogleTrendTest.csv', header=T, sep=' ')
trend3 <- read.table('GoogleTrendTest.csv', header=T, sep='')
trend3 <- read.table('GoogleTrendTest.csv', header=T, sep=',')
trend3 <- read.table('GoogleTrendTest.csv')
trend3 <- read.table('GoogleTrendTest.txt.csv', header=T, sep=',')
trend3[2,2]
trend3[2,1]
trend3[1,1]
trend3[1]
trend3[1,1]
trend3[1,1]
date1 <- trend3[1,1]
class(date1)
trend3[2,2]
trend3[1,2]
trend3[3,1]
date2 <- trend[3,1]
date1 < date2
print(date1)
date3 <- 2017-01-01
date3
date3 <- '2017-01-01'
date3
date4 <- '2017-01-05'
date3 < date4
date3 > date4
as.character(trend3$Week)
View(trend3)
trend3[1,1]
trend3 <- as.character(trend3$Week)
trend3[1,1]
trend3 <- read.table('GoogleTrendTest.txt.csv', header=T, sep=',')
trend3 <- cbind(as.character(trend3$Week), trend3$Atlanta.Hawks...United.States.)
trend3[1,1]
View(train)
date1 <- train[1,4]
date1
train2 <- cbind(train$Game_ID, train$Season, train$\)
train2 <- cbind(train$Game_ID, train$Season, as.character(train$Game_Date), train$Away_Team, train$Home_Team, train$Rounded.Viewers, train$X)
View(train2)
train2 <- cbind(train$Game_ID, as.character(train$Season), as.character(train$Game_Date), train$Away_Team, train$Home_Team, train$Rounded.Viewers, train$X)
View(train2)
date1 <- train[1,4]
date1
date1 <- train2[1,3]
date1
date1 <- date2
date1
date1 <- train2[1,3]
date1 < date3
date1 > date3
date3 < "2018-01-01"
date3 < "2012-01-01"
train2 <- cbind(train$Game_ID, as.character(train$Season), as.character(train$Game_Date), as.character(train$Away_Team), as.character(train$Home_Team), train$Rounded.Viewers, train$X)
View(train2)
train2$V5
train2.V5
train2[5]
train2[5,]
train2[,5]
for (row in 1:train2) {
print (row[1,4])
}
for (row in 1:train2) {
print (row[0,4])
}
#Focus on Match-Ups
for (row in 1:train2) {
print (row[4])
}
for (row in 1:train2) {
print (row[4,])
}
#Focus on Match-Ups
for (row in 1:train2) {
print (row[,4])
}
for (row in 1:train2) {
print (row[,4])
}
#Focus on Match-Ups
for (row in 1:train2) {
print (row[,3])
}
#Focus on Match-Ups
for (row in 1:train2) {
print (row[3,])
}
#Focus on Match-Ups
for (row in 1:train2) {
print (row[1,1])
}
#Focus on Match-Ups
for (row in 1:train2) {
print (row[0,1])
}
#Focus on Match-Ups
for (row in 1:train2) {
print (row[0,0])
}
#Focus on Match-Ups
for (row in 1:train2) {
print (row)
}
for (row in 1:train2) {
print (train2[row,])
}
#Focus on Match-Ups
for (row in 1:train2) {
print (train2[row,4])
}
for (row in 1:train2) {
if (train2[row,4] == 'ATL'){
for (trend in 1:trend3) {
if (trend3[trend,1] > train2[row,3]) {
train2[row,7] = trend3[trend,2]
}
}
}
}
#Focus on Match-Ups
for (row in 1:train2) {
trainRow <- row
if (train2[row,4] == 'ATL'){
for (row in 1:trend3) {
if (trend3[trend,1] > train2[trainRow,3]) {
train2[trainRow,7] = trend3[row,2]
}
}
}
}
for (row in 1:trend3) {}
for (row in 1:train2) {}
for (row in 1:134) { print(train2[row])}
for (row in 1:2000) {
trainRow <- row
if (train2[row,4] == 'ATL'){
for (row in 1:67) {
if (trend3[trend,1] > train2[trainRow,3]) {
train2[trainRow,7] = trend3[row,2]
}
}
}
}
for (row in 1:2000) {
trainRow <- row
if (train2[row,4] == 'ATL'){
for (row in 1:67) {
if (trend3[row,1] > train2[trainRow,3]) {
train2[trainRow,7] = trend3[row,2]
}
}
}
}
View(trend2)
View(trend3)
View(train2)
#Focus on Match-Ups
for (row in 1:2000) {
trainRow <- row
if (train2[row,4] == 'ATL'){
for (row in 1:67) {
if (trend3[row,1] > train2[trainRow,3]) {
train2[trainRow,7] = trend3[row,2]
break
}
}
}
}
for (row in 1:2000) {
trainRow <- row
if (train2[row,4] == 'ATL'){
for (row in 1:67) {
if (trend3[row,1] < train2[trainRow,3]) {
train2[trainRow,7] = trend3[row,2]
break
}
}
}
}
View(train2)
savehistory("C:/Users/my_ma/Documents/NBA-Hackathon/Scripts/Business_Analytics_For_Loops.Rhistory")
